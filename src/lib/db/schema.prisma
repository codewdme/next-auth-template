datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?         @default("https://i.ibb.co/BVsM1f6/product-placeholder.jpg")
  accounts      Account[]
  sessions      Session[]
  password      String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isStoreOwner  Boolean?        @default(false)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Customer {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  phone           String?
  password        String?
  customerSegment CustomerSegment   @default(NEW)
  orders          Order[]
  storeBalance    Int               @default(0)
  addresses       ShippingAddress[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum CustomerSegment {
  NEW //SPENT LESS THAN 10000rs. AND IN LAST 30 DAYS
  LOYAL //SPENT BETWEEN 10000rs. AND 50000rs. AVERAGE ORDER VALUE OF 5000rs.
  VIP //SPENT MORE THAN 50000rs. AVERAGE ORDER VALUE OF 20000rs.
  VVIP //SPENT MORE THAN 100000rs. AVERAGE ORDER VALUE OF 50000rs.
}

model ShippingAddress {
  id         String    @id @default(cuid())
  orderId    String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Order      Order[]
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model Order {
  id                String          @id @default(cuid())
  customerId        String
  customer          Customer        @relation(fields: [customerId], references: [id])
  items             OrderItem[]
  totalAmount       Float
  status            OrderStatus     @default(PENDING)
  paymentId         String?
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  placedAt          DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shippingAddressId String
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  order      Order  @relation(fields: [orderId], references: [id])
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String
  amount    Float
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  paidAt    DateTime?
  createdAt DateTime      @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  RETURNED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Product {
  id            String        @id @default(cuid())
  name          String
  images        String[]      @default(["https://i.ibb.co/BVsM1f6/product-placeholder.jpg"])
  status        ProductStatus @default(DRAFT)
  description   String[]
  price         Float
  currency      Currency      @default(INR)
  stock         Int
  stockAlertQty Int?          @default(5)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Collection    Collection?   @relation(fields: [collectionId], references: [id])
  collectionId  String?
}

enum Currency {
  USD
  EUR
  GBP
  INR
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  tags        String[]
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model GiftCard {
  id         String    @id @default(cuid())
  code       String    @unique
  amount     Float?
  currency   Currency  @default(INR)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  redeemedAt DateTime? // Nullable to indicate it might not be redeemed
}

model Discount {
  id                  String                @id @default(cuid())
  code                String                @unique
  name                String
  description         String?
  type                DiscountType
  value               Float
  startDate           DateTime
  endDate             DateTime
  usageLimit          Int?
  usageCount          Int                   @default(0)
  status              DiscountStatus        @default(DRAFT)
  minimumOrderValue   Float?
  eligibilityCriteria EligibilityCriteria[]
  applyTo             ApplyTo?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@index([code])
  @@index([status])
  @@index([startDate, endDate])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
}

enum DiscountStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  EXPIRED
  ARCHIVED
}

enum EligibilityCriteria {
  ALL
  NEW_CUSTOMERS
  RETURNING_CUSTOMERS
  SPECIFIC_CUSTOMERS
}

enum ApplyTo {
  ALL_PRODUCTS
  SPECIFIC_PRODUCTS
  SPECIFIC_COLLECTIONS
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
